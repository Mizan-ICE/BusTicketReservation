{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BusService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiBaseUrl; // '/api'\n    this.handleError = err => {\n      if (err.status === 0) {\n        return throwError(() => new Error('Cannot reach API (server down, CORS, or network).'));\n      }\n      const msg = err.error?.message || err.message || 'Request failed';\n      return throwError(() => new Error(`HTTP ${err.status} ${err.statusText}: ${msg}`));\n    };\n  }\n  searchBuses(from, to, journeyDate) {\n    const params = new HttpParams().set('from', from).set('to', to).set('journeyDate', journeyDate);\n    return this.http.get(`${this.baseUrl}/Bus/Availablebus`, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n  getBusScheduleDetails(busScheduleId) {\n    return this.http.get(`${this.baseUrl}/Booking/schedule/${busScheduleId}`).pipe(catchError(this.handleError));\n  }\n  bookTicket(bookingData) {\n    return this.http.post(`${this.baseUrl}/Booking/book`, bookingData).pipe(catchError(this.handleError));\n  }\n  getTicket(ticketId) {\n    return this.http.get(`${this.baseUrl}/Booking/${ticketId}`).pipe(catchError(this.handleError));\n  }\n  cancelTicket(ticketId) {\n    return this.http.delete(`${this.baseUrl}/Booking/${ticketId}/cancel`).pipe(catchError(this.handleError));\n  }\n  static {\n    this.ɵfac = function BusService_Factory(t) {\n      return new (t || BusService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BusService,\n      factory: BusService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","throwError","catchError","environment","BusService","constructor","http","baseUrl","apiBaseUrl","handleError","err","status","Error","msg","error","message","statusText","searchBuses","from","to","journeyDate","params","set","get","pipe","getBusScheduleDetails","busScheduleId","bookTicket","bookingData","post","getTicket","ticketId","cancelTicket","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["d:\\BusTicketReservation\\Frontend\\bus-ticket-reservation\\src\\app\\services\\bus.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AvailableBus, BusScheduleDetails, BookTicketRequest, Ticket } from '../models/bus.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BusService {\r\n  private baseUrl = environment.apiBaseUrl; // '/api'\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  searchBuses(from: string, to: string, journeyDate: string): Observable<AvailableBus[]> {\r\n    const params = new HttpParams()\r\n      .set('from', from)\r\n      .set('to', to)\r\n      .set('journeyDate', journeyDate);\r\n\r\n    return this.http\r\n      .get<AvailableBus[]>(`${this.baseUrl}/Bus/Availablebus`, { params })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private handleError = (err: HttpErrorResponse) => {\r\n    if (err.status === 0) {\r\n      return throwError(() => new Error('Cannot reach API (server down, CORS, or network).'));\r\n    }\r\n    const msg = err.error?.message || err.message || 'Request failed';\r\n    return throwError(() => new Error(`HTTP ${err.status} ${err.statusText}: ${msg}`));\r\n  };\r\n\r\n  getBusScheduleDetails(busScheduleId: string): Observable<BusScheduleDetails> {\r\n    return this.http\r\n      .get<BusScheduleDetails>(`${this.baseUrl}/Booking/schedule/${busScheduleId}`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  bookTicket(bookingData: BookTicketRequest): Observable<Ticket> {\r\n    return this.http\r\n      .post<Ticket>(`${this.baseUrl}/Booking/book`, bookingData)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getTicket(ticketId: string): Observable<Ticket> {\r\n    return this.http\r\n      .get<Ticket>(`${this.baseUrl}/Booking/${ticketId}`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  cancelTicket(ticketId: string): Observable<any> {\r\n    return this.http\r\n      .delete(`${this.baseUrl}/Booking/${ticketId}/cancel`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAwCA,UAAU,QAAQ,sBAAsB;AAChF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAG5D,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,UAAU,CAAC,CAAC;IAelC,KAAAC,WAAW,GAAIC,GAAsB,IAAI;MAC/C,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;QACpB,OAAOV,UAAU,CAAC,MAAM,IAAIW,KAAK,CAAC,mDAAmD,CAAC,CAAC;;MAEzF,MAAMC,GAAG,GAAGH,GAAG,CAACI,KAAK,EAAEC,OAAO,IAAIL,GAAG,CAACK,OAAO,IAAI,gBAAgB;MACjE,OAAOd,UAAU,CAAC,MAAM,IAAIW,KAAK,CAAC,QAAQF,GAAG,CAACC,MAAM,IAAID,GAAG,CAACM,UAAU,KAAKH,GAAG,EAAE,CAAC,CAAC;IACpF,CAAC;EAnBsC;EAEvCI,WAAWA,CAACC,IAAY,EAAEC,EAAU,EAAEC,WAAmB;IACvD,MAAMC,MAAM,GAAG,IAAIrB,UAAU,EAAE,CAC5BsB,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC,CACjBI,GAAG,CAAC,IAAI,EAAEH,EAAE,CAAC,CACbG,GAAG,CAAC,aAAa,EAAEF,WAAW,CAAC;IAElC,OAAO,IAAI,CAACd,IAAI,CACbiB,GAAG,CAAiB,GAAG,IAAI,CAAChB,OAAO,mBAAmB,EAAE;MAAEc;IAAM,CAAE,CAAC,CACnEG,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC;EACvC;EAUAgB,qBAAqBA,CAACC,aAAqB;IACzC,OAAO,IAAI,CAACpB,IAAI,CACbiB,GAAG,CAAqB,GAAG,IAAI,CAAChB,OAAO,qBAAqBmB,aAAa,EAAE,CAAC,CAC5EF,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC;EACvC;EAEAkB,UAAUA,CAACC,WAA8B;IACvC,OAAO,IAAI,CAACtB,IAAI,CACbuB,IAAI,CAAS,GAAG,IAAI,CAACtB,OAAO,eAAe,EAAEqB,WAAW,CAAC,CACzDJ,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC;EACvC;EAEAqB,SAASA,CAACC,QAAgB;IACxB,OAAO,IAAI,CAACzB,IAAI,CACbiB,GAAG,CAAS,GAAG,IAAI,CAAChB,OAAO,YAAYwB,QAAQ,EAAE,CAAC,CAClDP,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC;EACvC;EAEAuB,YAAYA,CAACD,QAAgB;IAC3B,OAAO,IAAI,CAACzB,IAAI,CACb2B,MAAM,CAAC,GAAG,IAAI,CAAC1B,OAAO,YAAYwB,QAAQ,SAAS,CAAC,CACpDP,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC;EACvC;;;uBA9CWL,UAAU,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVjC,UAAU;MAAAkC,OAAA,EAAVlC,UAAU,CAAAmC,IAAA;MAAAC,UAAA,EADG;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}